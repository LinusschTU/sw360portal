/*
 * Copyright Bosch Software Innovations GmbH, 2017.
 * Part of the SW360 Portal Project.
 *
 * SPDX-License-Identifier: EPL-1.0
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package org.eclipse.sw360.rest.resourceserver.vulnerability;

import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.eclipse.sw360.datahandler.common.SW360Constants;
import org.eclipse.sw360.datahandler.thrift.ProjectReleaseRelationship;
import org.eclipse.sw360.datahandler.thrift.ReleaseRelationship;
import org.eclipse.sw360.datahandler.thrift.components.Component;
import org.eclipse.sw360.datahandler.thrift.projects.Project;
import org.eclipse.sw360.datahandler.thrift.users.User;
import org.eclipse.sw360.datahandler.thrift.vulnerabilities.Vulnerability;
import org.eclipse.sw360.rest.resourceserver.core.HalResource;
import org.eclipse.sw360.rest.resourceserver.core.RestControllerHelper;
import org.eclipse.sw360.rest.resourceserver.project.ProjectController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.rest.webmvc.BasePathAwareController;
import org.springframework.data.rest.webmvc.RepositoryLinksResource;
import org.springframework.hateoas.Resource;
import org.springframework.hateoas.ResourceProcessor;
import org.springframework.hateoas.Resources;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.oauth2.provider.OAuth2Authentication;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;

import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@BasePathAwareController
@Slf4j
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
public class VulnerabilityController implements ResourceProcessor<RepositoryLinksResource> {
    static final String VULNERABILITIES_URL = "/vulnerabilities";

    @NonNull
    private final Sw360VulnerabilityService vulnerabilityService;

    @NonNull
    private final RestControllerHelper restControllerHelper;

    @RequestMapping(value = VULNERABILITIES_URL)
    public ResponseEntity<Resources<Resource<Vulnerability>>> getVulnerabilities(OAuth2Authentication oAuth2Authentication) {
        User user = restControllerHelper.getSw360UserFromAuthentication(oAuth2Authentication);
        List<Vulnerability> vulnerabilities = vulnerabilityService.getVulnerabilities(user);

        List<Resource<Vulnerability>> vulnerabilityResources = new ArrayList<>();
        for (Vulnerability vulnerability : vulnerabilities) {
            Resource<Vulnerability> vulnerabilityResource = new Resource<>(vulnerability);
            vulnerabilityResources.add(vulnerabilityResource);
        }
        Resources<Resource<Vulnerability>> resources = new Resources<>(vulnerabilityResources);

        return new ResponseEntity<>(resources, HttpStatus.OK);
    }

    @RequestMapping(VULNERABILITIES_URL + "/{id}")
    public ResponseEntity<HalResource<Vulnerability>> getVulnerability(
            @PathVariable("id") String id, OAuth2Authentication oAuth2Authentication) {
        User user = restControllerHelper.getSw360UserFromAuthentication(oAuth2Authentication);
        Vulnerability vulnerability = vulnerabilityService.getVulnerabilityByExternalId(id, user);
        HalResource<Vulnerability> vulnerabilityHalResource = createHalVulnerability(vulnerability, user);
        return new ResponseEntity<>(vulnerabilityHalResource, HttpStatus.OK);
    }

    @Override
    public RepositoryLinksResource process(RepositoryLinksResource resource) {
        resource.add(linkTo(VulnerabilityController.class).slash("api" + VULNERABILITIES_URL).withRel("vulnerabilities"));
        return resource;
    }

    private HalResource<Vulnerability> createHalVulnerability(Vulnerability vulnerability, User user) {
        return new HalResource<>(vulnerability);
    }
}
